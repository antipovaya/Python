"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üìå –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è
–≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
üìå –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
"""
import logging

logging.basicConfig(filename='example.log.', filemode='w', encoding='utf-8',  # –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–º "w",  —Ç–æ —Ñ–∞–π–ª –±—É–¥–µ—Ç
                    # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
                    format='{levelname} - {asctime} –≤ —Å—Ç—Ä–æ–∫–µ {lineno} '
                           '—Ñ—É–Ω–∫—Ü–∏—è "{funcName}()" : {msg}', style='{', level=logging.WARNING)


def func(a, b):
    try:
        res = a / b
    except ZeroDivisionError:
        logging.warning('–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å')
        return ''
    else:
        return res


print(func(9, 0))
