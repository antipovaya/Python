# —Ñ—É–Ω–∫—Ü–∏—è map
text = ['–ü–†–ò–í–ï–¢', '–ó–î–æ—Ä–æ–≤–æ', '–ü—Ä–∏–í–µ—Ç–°–í–£–Æ']
res = map(lambda x: x.lower(), text)
print(*res)  # –∑–≤–µ–∑–¥–æ—á–∫–∞ —Ç—É—Ç –∑–Ω–∞—á–∏—Ç —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞


# —Ñ—É–Ω–∫—Ü–∏—è filter –±–µ—Ä–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false
num = [-2, 22, -4, 88]
res = tuple(filter(lambda x: x > 0, num)) # —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥–æ—á–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º tuple, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –≤—ã—Ö–æ–¥–µ
# x–æ—Ç–∏–º –∫–æ—Ä—Ç–µ–∂
print(res)


# —Ñ—É–Ω–∫—Ü–∏—è zip –ø–æ–∑–≤–æ–ª–∏—Ç –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –º–∞—Å—Å–∏–≤–∞–º:
# –ò—Ç–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –∫—Ä–∞—Ç—á–∞–π—à–∞—è –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.

names = ['–ò–≤–∞–Ω', '–ù–∏–∫–æ–ª–∞–π', '–°–µ–º–µ–Ω']
salaries = [125_000, 96_000, 109_000]
awards = [0.1, 0.25, 0.13, 0.99]
for name, salary, award, in zip(names, salaries, awards):
    print(f'{name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary:.2f} –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é {salary * award:.2f}')


# –§—É–Ω–∫—Ü–∏—è max()
# max(iterable, *[, key, default]) –∏–ª–∏ max(arg1, arg2, *args[, key])
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ
# –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—â–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –Ω–∏—Ö. –ö–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä key
# —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–∞–≤–Ω–∏—Ç—å, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è
# —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –û—Ç–¥–µ–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä default –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
# –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä

lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä",
109_000)]
print(max(lst_1, default='empty'))
print(max(*lst_2))
print(max(lst_3, key=lambda x: x[1]))


# ‚óè –§—É–Ω–∫—Ü–∏—è min()
# min(iterable, *[, key, default]) –∏–ª–∏ min(arg1, arg2, *args[, key])
# –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ max, –Ω–æ –∏—â–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.

lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä",
109_000)]
print(min(lst_1, default='empty'))
print(min(*lst_2))
print(min(lst_3, key=lambda x: x[1]))


# –§—É–Ω–∫—Ü–∏—è sum()
# sum(iterable, /, start=0)
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç start –∑–∞–¥–∞—ë—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

my_list = [42, 256, 73]
print(sum(my_list))
print(sum(my_list, start=1024))  # —Å—Ç–∞—Ä—Ç –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫ —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è —Å—É–º–º–∞ —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ



# –§—É–Ω–∫—Ü–∏—è all()
# all(iterable)
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —è–≤–ª—è—é—Ç—Å—è
# –∏—Å—Ç–∏–Ω–æ–π. –ù–∞ Python —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ all –≤—ã–≥–ª—è–¥–µ–ª–æ –±—ã —Ç–∞–∫:
# def all(iterable):
#     for element in iterable:
#         if not element:
#             return False
#         return True

# –§—É–Ω–∫—Ü–∏—è all –æ–±—ã—á–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–∞–∫–∏—Ö-—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ
# –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∏–ª–∏ –ª–æ–∂–Ω—ã–º–∏.
numbers = [42, -73, 1024]
if all(map(lambda x: x > 0, numbers)):
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
else:
    print('–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')

# –§—É–Ω–∫—Ü–∏—è map –∑–∞–º–µ–Ω–∏–ª–∞ —á–∏—Å–ª–∞ –Ω–∞ True –∏ False, –¥–∞–ª–µ–µ all –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ –≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
# –±–æ–ª—å—à–µ –Ω—É–ª—è –∏–ª–∏ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –Ω–µ –±–æ–ª–µ–µ –Ω—É–ª—è.


# –§—É–Ω–∫—Ü–∏—è any()
# any(iterable)
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π. –ù–∞ Python —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ any –≤—ã–≥–ª—è–¥–µ–ª–æ –±—ã —Ç–∞–∫:

# def any(iterable):
#     for element in iterable:
#         if element:
#             return True
#     return False
# –§—É–Ω–∫—Ü–∏—è any —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ all. –ù–æ –µ—Å–ª–∏ all –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ if c
# —Ü–µ–ø–æ—á–∫–æ–π and, —Ç–æ any ‚Äî —ç—Ç–æ if —Å —Ü–µ–ø–æ—á–∫–æ–π or.
# –§—É–Ω–∫—Ü–∏—è map –∑–∞–º–µ–Ω–∏–ª–∞ —á–∏—Å–ª–∞ –Ω–∞ True –∏ False, –¥–∞–ª–µ–µ all –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ –≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
# –±–æ–ª—å—à–µ –Ω—É–ª—è –∏–ª–∏ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –Ω–µ –±–æ–ª–µ–µ –Ω—É–ª—è.


numbers = [42, -73, 1024]
if any(map(lambda x: x > 0, numbers)):
    print('–•–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π')
else:
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –±–æ–ª—å—à–µ –Ω—É–ª—è')


# –§—É–Ω–∫—Ü–∏—è chr()
# chr(integer)
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Æ–Ω–∏–∫–æ–¥ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É. –ù–æ–º–µ—Ä -
# —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1_114_111.
print(chr(97))
print(chr(1105))
print(chr(128510))
# ‚óè –§—É–Ω–∫—Ü–∏—è ord()
# ord(char)
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ –Æ–Ω–∏–∫–æ–¥.
print(ord('a'))
print(ord('–∞'))
print(ord('üòâ'))
# –§—É–Ω–∫—Ü–∏–∏ ord –∏ chr –≤—ã–ø–æ–ª–Ω—è—é—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.



# –§—É–Ω–∫—Ü–∏—è locals()
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞
# –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
# SIZE = 10
# def func(a, b, c):
#     x = a + b
#     print(locals())
#     z = x + c
#     return z
#
# func(1, 2, 3)
# –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ a, b, c, x –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ SIZE
# –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ –≤—ã–≤–æ–¥, —Ç.–∫. –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏. –¢–∞–∫ –∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
# –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è z. –û–Ω–∞ –±—ã–ª–∞ –≤–ø–µ—Ä–≤—ã–µ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ locals.


# –§—É–Ω–∫—Ü–∏—è globals()
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, —Ç.–µ. –∏–∑
# –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –º–æ–¥—É–ª—è.
SIZE = 10
def func(a, b, c):
    x = a + b
    print(globals())
    z = x + c
    return z
print(globals())
print(func(1, 2, 3))
# –§—É–Ω–∫—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—Ç
# –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
# –í —Å–ª–æ–≤–∞—Ä–µ –æ—Ç globals —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –∏ –¥–∞–Ω–¥–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª—è. –û–Ω–∏ –Ω—É–∂–Ω—ã Python
# –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞.


# –§—É–Ω–∫—Ü–∏—è vars()
# –§—É–Ω–∫—Ü–∏—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ locals(). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ vars
# –æ–±—ä–µ–∫—Ç, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç __dict__. –ê –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ—Ç —É
# –æ–±—ä–µ–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É TypeError.
print(vars(int))
# –ü–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ int

def my_func(a, b):
    return a ** b


def my_func2(*args):
    return args[0] ** args[1]


def my_func3(a, b):
    return a ** b


def my_func4(**kwargs):
    return kwargs['a'] ** kwargs['b']


func = lambda a, b: a ** b

print(my_func(3, 3))
print(my_func2(3, 3))
print(my_func3(b=5, a=3))
print(my_func4(b=4, a=7))
print(func(2, 2))
print((lambda a, b: a ** b)(3, 3)) # –í—ã–∑–æ–≤ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π