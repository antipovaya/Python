# Задание 1. Как дела?
# Вася совсем заскучал на работе и решил побаловаться с кодом проекта. Он
# написал надоедливый декоратор, который при вызове декорируемой функции
# спрашивает у пользователя «Как дела?», вне зависимости от ответа пишет что-то
# вроде «А у меня не очень!» и только потом запускает саму функцию. Правда, после
# такой выходки Васю чуть не уволили с работы.
# Реализуйте такой же декоратор и проверьте его работу на нескольких функциях.
# Пример кода:
# @how_are_you
# def test():
# print('<Тут что-то происходит...>')
# test()
# Результат:
# Как дела? Хорошо.
# А у меня не очень! Ладно, держи свою функцию.
# <Тут что-то происходит...>
# Подсказка № 1
# Используйте модуль functools для создания декоратора. Модуль functools содержит
# функцию wraps, которая позволяет сохранить метаданные декорируемой функции при
# её обёртывании. Это помогает сохранить имя функции и её документацию.
# Подсказка № 2
# Создайте функцию-декоратор, которая принимает функцию как аргумент и возвращает
# новую функцию. Декоратор — это функция, которая принимает другую функцию и
# возвращает обёрнутую функцию. Эта обёрнутая функция будет выполнять
# дополнительные действия перед вызовом исходной функции.
# Подсказка № 3
# Внутри функции-декоратора используйте input() для получения ответа пользователя.
# Используйте функцию input() для запроса у пользователя фразы "Как дела?", но не
# используйте его ответ, а просто напечатайте фиксированное сообщение.
# Подсказка № 4
# После вывода сообщения вызовите декорируемую функцию с теми же аргументами и
# ключевыми словами. Передайте аргументы и ключевые слова декорируемой функции,
# чтобы она выполнила своё предназначение.


from functools import wraps


def how_are_you(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        input('Привет! Как дела? ')
        print('А у меня не очень! Вот твоя функция: ')
        return func(*args, **kwargs)  # Вызов оригинальной функции

    return wrapper


@how_are_you
def func1(a, b):
    return a ** b


if __name__ == '__main__':
    print(func1(2, 3))
